name: Release
on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      - run: npm install
      - run: npm run build --ws --if-present

      - name: Check if gei-users version has been updated
        id: check-users-version
        run: |
          PACKAGE_NAME="gei-users"
          CURRENT_VERSION=$(npm show "$PACKAGE_NAME" version || echo "0.0.0")
          NEW_VERSION=$(node -p "require('./packages/integrations/gei-users/package.json').version")
          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]
          then
            echo "users_updated=true" >> $GITHUB_ENV
          else
            echo "users_updated=false" >> $GITHUB_ENV
          fi

      - name: Publish gei-users
        if: env.users_updated == 'true'
        run: npm publish -w gei-users --access public --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Check if gei-rest version has been updated
        id: check-rest-version
        run: |
          PACKAGE_NAME="gei-rest"
          CURRENT_VERSION=$(npm show "$PACKAGE_NAME" version || echo "0.0.0")
          NEW_VERSION=$(node -p "require('./packages/integrations/gei-rest/package.json').version")
          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]
          then
            echo "rest_updated=true" >> $GITHUB_ENV
          else
            echo "rest_updated=false" >> $GITHUB_ENV
          fi

      - name: Publish gei-rest
        if: env.rest_updated == 'true'
        run: npm publish -w gei-rest --access public --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Check if gei-s3 version has been updated
        id: check-s3-version
        run: |
          PACKAGE_NAME="gei-s3"
          CURRENT_VERSION=$(npm show "$PACKAGE_NAME" version || echo "0.0.0")
          NEW_VERSION=$(node -p "require('./packages/integrations/gei-s3/package.json').version")
          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]
          then
            echo "s3_updated=true" >> $GITHUB_ENV
          else
            echo "s3_updated=false" >> $GITHUB_ENV
          fi

      - name: Publish gei-s3
        if: env.s3_updated == 'true'
        run: npm publish -w gei-s3 --access public --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Check if gei-crud version has been updated
        id: check-crud-version
        run: |
          PACKAGE_NAME="gei-crud"
          CURRENT_VERSION=$(npm show "$PACKAGE_NAME" version || echo "0.0.0")
          NEW_VERSION=$(node -p "require('./packages/integrations/gei-crud/package.json').version")
          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]
          then
            echo "crud_updated=true" >> $GITHUB_ENV
          else
            echo "crud_updated=false" >> $GITHUB_ENV
          fi

      - name: Publish gei-crud
        if: env.crud_updated == 'true'
        run: npm publish -w gei-crud --access public --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Check if gei-stripe version has been updated
        id: check-stripe-version
        run: |
          PACKAGE_NAME="gei-stripe"
          CURRENT_VERSION=$(npm show "$PACKAGE_NAME" version || echo "0.0.0")
          NEW_VERSION=$(node -p "require('./packages/integrations/gei-stripe/package.json').version")
          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]
          then
            echo "stripe_updated=true" >> $GITHUB_ENV
          else
            echo "stripe_updated=false" >> $GITHUB_ENV
          fi

      - name: Publish gei-stripe
        if: env.stripe_updated == 'true'
        run: npm publish -w gei-stripe --access public --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Check if gei-basic version has been updated
        id: check-basic-version
        run: |
          PACKAGE_NAME="gei-basic"
          CURRENT_VERSION=$(npm show "$PACKAGE_NAME" version || echo "0.0.0")
          NEW_VERSION=$(node -p "require('./packages/integrations/gei-basic/package.json').version")
          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]
          then
            echo "basic_updated=true" >> $GITHUB_ENV
          else
            echo "basic_updated=false" >> $GITHUB_ENV
          fi

      - name: Publish gei-basic
        if: env.basic_updated == 'true'
        run: npm publish -w gei-basic --access public --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
