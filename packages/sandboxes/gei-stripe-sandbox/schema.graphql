

type Query{
	products(
		filter: ProductFilter
	): ProductsPage
	subscriptions(  
		filter: SubscriptionFilter
	): [Subscription!]
}

type Mutation{
	"""
	Creates stripe customer for further purchases, links with user "email" field in UserCollection
	"""
	initStripeCustomer(
		initStripeCustomerInput: InitStripeCustomerInput!
	): Boolean!
	createCheckoutSession(
		payload: CreateCheckoutSessionInput!
	): String!
	createNewUserCheckoutSession(
		payload: CreateNewUserCheckoutSessionInput!
	): String!
	createCustomerPortal(
		payload: CreateCustomerPortalInput!
	): String!
	createConnectAccount(
		payload: CreateConnectAccountInput!
	): Boolean!
	"""
	entry point for Weebhooks.
	"""
	webhook: String
}

input CreateConnectAccountInput {
	type: String!
	country: String!
	email: String!
	business_type: String!
	bankAccount: BankAccountInput!
}

input BankAccountInput {
	country: String!
	"""
	Required supported currency for the country https://stripe.com/docs/payouts
	"""
	currency: String!
	"""
	IBAN account number
	"""
	account_number: String!
	"""
	Required when attaching the bank account to a Customer
	"""
	account_holder_name: String!
}

enum BankAccountHolderType {
	individual
	company
}

input SubscriptionFilter {
	customerId: String
}

type Subscription {
	id: String!
	cancel_at_period_end: Boolean!
	current_period_end: Timestamp!
	current_period_start: Timestamp!
	customer: String!
	description: String
	items:[Item!]!
	quantity: Int!
	start: Timestamp!
	status: SubStatus!
}

enum SubStatus{
	incomplete
	incomplete_expired
	trialing
	active
	past_due
	canceled
	unpaid
}

type Item {
	id: String!
	created: Timestamp!
	metadata: AnyObject
	price: Price!
	quantity: Int!
	subscription: String!
}

type User{
	stripeId: String
	email: String!
}

input InitStripeCustomerInput{
	email: String!
	name: String
	phone: String
	address: AddressInput
}

input CreateNewUserCheckoutSessionInput{
	"""
	Return url after successful transaction
	"""
	successUrl: String!
	cancelUrl: String!
	products: [ProductInput!]!
}

input CreateCheckoutSessionInput{
	userEmail: String!
	"""
	Return url after successful transaction
	"""
	successUrl: String!
	cancelUrl: String!
	products: [ProductInput!]!
	"""
	Define amount to transfer into stripe connect account and set the rest for application fees
	"""
	applicationFee: ApplicationFeeInput
}

input ApplicationFeeInput {
	"""
	Value from 0-100
	"""
	application_fee: Int!
	"""
	Connect Account (not stripe customer) id
	"""
	connectAccountId: String!
}

input ProductInput{
	productId: String!
	quantity: Int!
}

input CreateCustomerPortalInput{
	userEmail: String!
	returnUrl: String!
}

input AddressInput{
	"""
	City, district, suburb, town, village, or ward.
	"""
	city: String!
	"""
	Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
	"""
	country: String!
	"""
	Address line 1 (e.g., street, block, PO Box, or company name).
	"""
	line1: String!
	"""
	Address line 2 (e.g., apartment, suite, unit, or building).
	"""
	line2: String!
	"""
	ZIP or postal code.
	"""
	postal_code: String!
	"""
	State, county, province, prefecture, or region.
	"""
	state: String!
}

type Customer{
	customerId: String!
	email: String!
	name: String
	address: Address
}

type Address{
	city: String
	country: String
	line1: String
	line2: String
	postal_code: String
	state: String
}

input ProductFilter{
	active: Boolean
	created: TimestampFilter
	limit: Int
	shippable: Boolean
	ids: [ID!]
	starting_after: ID
	ending_before: ID
	url: String
}

input RecurringFilter{
	interval: Interval
	usageType: UsageType
}

input PriceFilter{
	active: Boolean
	currency: String
	product: ID
	type: Type
	created: TimestampFilter
	limit: Int
	starting_after: ID
	ending_before: ID
	recurring: RecurringFilter
}

type Dimensions{
	height: Float
	length: Float
	weight: Float
	width: Float
}

type Product{
	id: ID!
	active: Boolean!
	created: Timestamp
	default_price: Price
	description: String
	images: [String!]
	livemode: Boolean
	metadata: AnyObject
	name: String
	package_dimensions: Dimensions
	shippable: Boolean
	statement_descriptor: String
	tax_code: String
	unitLabel: String
	updated: Timestamp
	url: String
	prices: [Price!]
}

enum BillingScheme{
	PER_UNIT
	TIERED
}

"""
Offset measured in seconds since Unix epoch.
"""
scalar Timestamp

input TimestampFilter{
	Gt: Timestamp
	Gte: Timestamp
	Lt: Timestamp
	Lte: Timestamp
}

type CustomUnitAmount{
	maximum: Int
	minimum: Int
	preset: Int
}

"""
Any value that can be represented as JSON object
"""
scalar AnyObject

enum AggregateUsage{
	SUM
	LAST_DURING_PERIOD
	LAST_EVER
	MAX
}

enum Interval{
	MONTH
	YEAR
	WEEK
	DAY
}

enum UsageType{
	METERED
	LICENSED
}

type PriceRecurring{
	aggregate_usage: AggregateUsage
	interval: Interval
	interval_count: Int
	usage_type: UsageType
	trial_period_days: Int
}

enum TaxBehaviour{
	INCLUSIVE
	EXCLUSIVE
	UNSPECIFIED
}

enum TiersMode{
	GRADUATED
	VOLUME
}

enum Round{
	UP
	DOWN
}

type TransformQuantity{
	divideBy: Int
	round: Round
}

enum Type{
	RECURRING
	ONE_TIME
}

type Price{
	id: ID!
	active: Boolean
	billing_scheme: BillingScheme
	created: Timestamp
	currency: String
	custom_unit_amount: CustomUnitAmount
	livemode: Boolean
	lookup_key: String
	metadata: AnyObject
	nickname: String
	product: Product
	recurring: PriceRecurring
	tax_behavior: TaxBehaviour
	tiers_mode: TiersMode
	transform_quantity: TransformQuantity
	type: Type
	unit_amount: Int
	unit_amount_decimal: String
}

type ProductsPage{
	products: [Product!]
	startingAfter: ID
	endingBefore: ID
}

schema{
	query: Query,
	mutation: Mutation
}