type StripeQuery{
	products(
		filter: StripeProductFilter
	): StripeProductsPage
	subscriptions(
		filter: StripeSubscriptionFilter
	): [StripeSubscription!]
}

type StripeMutation{
	"""
	Creates stripe customer for further purchases, links with user "email" field in UserCollection
	"""
	initStripeCustomer(
		initStripeCustomerInput: StripeInitStripeCustomerInput!
	): Boolean!
	"""
	Creates checkout for existing user (returns checkout url)
	"""
	createCheckoutSession(
		payload: StripeCreateCheckoutSessionInput!
	): String!
	"""
	Creates checkout without providing user data - it will be filled during payment
	"""
	createNewUserCheckoutSession(
		payload: StripeCreateNewUserCheckoutSessionInput!
	): String!
	"""
	Creates stripe customer portal (returns portal url)
	"""
	createCustomerPortal(
		payload: StripeCreateCustomerPortalInput!
	): String!
	"""
	Create stripe connect external account for further transactions directly with banking account
	"""
	createConnectAccount(
		payload: StripeCreateConnectAccountInput!
	): Boolean!
	"""
	Gather payment method id using Stripe.js or a pre-built solution like Stripe Elements
	"""
	attachPaymentMethod(
		payload: StripeAttachPaymentMethodInput!
	): Boolean!
	setDefaultPaymentMethod(
		payload: StripesetDefaultPaymentMethodInput!
	): Boolean!
	"""
	entry point for Weebhooks.
	"""
	webhook: String
}

input StripesetDefaultPaymentMethodInput{
	attachedPaymentMethodId: String!
	customerId: String!
}

input StripeAttachPaymentMethodInput{
	paymentMethodId: String!
	customerId: String!
}

input StripeCreateConnectAccountInput{
	type: StripeConnectAccountType!
	country: String!
	email: String!
	business_type: StripeConnectAccountBusinessType!
	bankAccount: StripeBankAccountInput!
}

enum StripeConnectAccountBusinessType{
	company
	government_entity
	individual
	non_profit
}

enum StripeConnectAccountType{
	standard
	express
	custom
}

input StripeBankAccountInput{
	country: String!
	"""
	Required supported currency for the country https://stripe.com/docs/payouts
	"""
	currency: String!
	"""
	IBAN account number
	"""
	account_number: String!
	"""
	Required when attaching the bank account to a Customer
	"""
	account_holder_name: String!
	account_holder_type: StripeBankAccountHolderType!
}

enum StripeBankAccountHolderType{
	individual
	company
}

input StripeSubscriptionFilter{
	customerId: String
}

type StripeSubscription{
	id: String!
	cancel_at_period_end: Boolean!
	current_period_end: StripeTimestamp!
	current_period_start: StripeTimestamp!
	customer: String!
	description: String
	items: StripeSubscriptionItems!
	quantity: Int!
	status: StripeSubStatus!
}

enum StripeSubStatus{
	incomplete
	incomplete_expired
	trialing
	active
	past_due
	canceled
	unpaid
}

type StripeSubscriptionItems{
	data: [StripeItem!]!
	has_more: Boolean!
	total_count: Int!
	url: String!
	object: String!
}

type StripeItem{
	id: String!
	created: StripeTimestamp!
	metadata: StripeAnyObject
	price: StripePrice!
	quantity: Int!
	subscription: String!
}

type StripeUser{
	stripeId: String
	email: String!
}

input StripeInitStripeCustomerInput{
	email: String!
	name: String
	phone: String
	address: StripeAddressInput
}

input StripeCreateNewUserCheckoutSessionInput{
	"""
	Return url after successful transaction
	"""
	successUrl: String!
	cancelUrl: String!
	products: [StripeProductInput!]!
	"""
	Define amount to transfer into stripe connect account and set the rest for application fees
	"""
	applicationFee: StripeApplicationFeeInput
}

input StripeCreateCheckoutSessionInput{
	username: String!
	"""
	Return url after successful transaction
	"""
	successUrl: String!
	cancelUrl: String!
	products: [StripeProductInput!]!
	"""
	Define amount to transfer into stripe connect account and set the rest for application fees
	"""
	applicationFee: StripeApplicationFeeInput
}

input StripeApplicationFeeInput{
	"""
	Value from 0-100
	"""
	feePercentage: Int!
	"""
	Connect Account (not stripe customer) id
	"""
	connectAccountId: String!
}

input StripeProductInput{
	productId: String!
	quantity: Int!
}

input StripeCreateCustomerPortalInput{
	username: String!
	returnUrl: String!
}

input StripeAddressInput{
	"""
	City, district, suburb, town, village, or ward.
	"""
	city: String!
	"""
	Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
	"""
	country: String!
	"""
	Address line 1 (e.g., street, block, PO Box, or company name).
	"""
	line1: String!
	"""
	Address line 2 (e.g., apartment, suite, unit, or building).
	"""
	line2: String!
	"""
	ZIP or postal code.
	"""
	postal_code: String!
	"""
	State, county, province, prefecture, or region.
	"""
	state: String!
}

type StripeCustomer{
	customerId: String!
	email: String!
	name: String
	address: StripeAddress
}

type StripeAddress{
	city: String
	country: String
	line1: String
	line2: String
	postal_code: String
	state: String
}

input StripeProductFilter{
	active: Boolean
	created: StripeTimestampFilter
	limit: Int
	shippable: Boolean
	ids: [ID!]
	starting_after: ID
	ending_before: ID
	url: String
}

input StripeRecurringFilter{
	interval: StripeInterval
	usageType: StripeUsageType
}

input StripePriceFilter{
	active: Boolean
	currency: String
	product: ID
	type: StripeType
	created: StripeTimestampFilter
	limit: Int
	starting_after: ID
	ending_before: ID
	recurring: StripeRecurringFilter
}

type StripeDimensions{
	height: Float
	length: Float
	weight: Float
	width: Float
}

type StripeProduct{
	id: ID!
	active: Boolean!
	created: StripeTimestamp
	default_price: StripePrice
	description: String
	images: [String!]
	livemode: Boolean
	metadata: StripeAnyObject
	name: String
	package_dimensions: StripeDimensions
	shippable: Boolean
	statement_descriptor: String
	tax_code: String
	unitLabel: String
	updated: StripeTimestamp
	url: String
	prices: [StripePrice!]
}

enum StripeBillingScheme{
	PER_UNIT
	TIERED
}

"""
Offset measured in seconds since Unix epoch.
"""
scalar StripeTimestamp

input StripeTimestampFilter{
	Gt: StripeTimestamp
	Gte: StripeTimestamp
	Lt: StripeTimestamp
	Lte: StripeTimestamp
}

type StripeCustomUnitAmount{
	maximum: Int
	minimum: Int
	preset: Int
}

"""
Any value that can be represented as JSON object
"""
scalar StripeAnyObject

enum StripeAggregateUsage{
	SUM
	LAST_DURING_PERIOD
	LAST_EVER
	MAX
}

enum StripeInterval{
	MONTH
	YEAR
	WEEK
	DAY
}

enum StripeUsageType{
	METERED
	LICENSED
}

type StripePriceRecurring{
	aggregate_usage: StripeAggregateUsage
	interval: StripeInterval
	interval_count: Int
	usage_type: StripeUsageType
	trial_period_days: Int
}

enum StripeTaxBehaviour{
	INCLUSIVE
	EXCLUSIVE
	UNSPECIFIED
}

enum StripeTiersMode{
	GRADUATED
	VOLUME
}

enum StripeRound{
	UP
	DOWN
}

type StripeTransformQuantity{
	divideBy: Int
	round: StripeRound
}

enum StripeType{
	RECURRING
	ONE_TIME
}

type StripePrice{
	id: ID!
	active: Boolean
	billing_scheme: StripeBillingScheme
	created: StripeTimestamp
	currency: String
	custom_unit_amount: StripeCustomUnitAmount
	livemode: Boolean
	lookup_key: String
	metadata: StripeAnyObject
	nickname: String
	product: StripeProduct
	recurring: StripePriceRecurring
	tax_behavior: StripeTaxBehaviour
	tiers_mode: StripeTiersMode
	transform_quantity: StripeTransformQuantity
	type: StripeType
	unit_amount: Int
	unit_amount_decimal: String
}

type StripeProductsPage{
	products: [StripeProduct!]
	startingAfter: ID
	endingBefore: ID
}


schema{
	query: Query,
	mutation: Mutation
}

type Mutation {
	webhook: String
	StripeMutation: StripeMutation!
}

type Query {
	StripeQuery: StripeQuery!
}