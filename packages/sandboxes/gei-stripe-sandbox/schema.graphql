type StripeQuery{
	products(
		filter: StripeProductFilter
	): StripeProductsPage
	subscriptions(
		filter: StripeSubscriptionFilter!
	): [StripeSubscription!]
	paymentIntents(
		filter: StripePaymentIntentFilter!
	): [StripePaymentIntent!]
	invoices(
		filter: StripeInvoiceFilter!
	): [StripeInvoice!]
	customer(
		customerId: String!
	): StripeCustomer
}

type StripeMutation{
	"""
	Creates stripe customer for further purchases, links with user "email" field in UserCollection
	"""
	initStripeCustomer(
		initStripeCustomerInput: StripeInitStripeCustomerInput!
	): Boolean!
	"""
	Creates checkout for existing user (returns checkout url)
	"""
	createCheckoutSession(
		payload: StripeCreateCheckoutSessionInput!
	): String!
	"""
	Creates checkout without providing user data - it will be filled during payment
	"""
	createNewUserCheckoutSession(
		payload: StripeCreateNewUserCheckoutSessionInput!
	): String!
	"""
	Creates stripe customer portal (returns portal url)
	"""
	createCustomerPortal(
		payload: StripeCreateCustomerPortalInput!
	): String!
	"""
	Create stripe connect external account for further transactions directly with banking account
	"""
	createConnectAccount(
		payload: StripeCreateConnectAccountInput!
	): Boolean!
	"""
	Gather payment method id using Stripe.js or a pre-built solution like Stripe Elements
	"""
	attachPaymentMethod(
		payload: StripeAttachPaymentMethodInput!
	): Boolean!
	setDefaultPaymentMethod(
		payload: StripesetDefaultPaymentMethodInput!
	): Boolean!
	createPayoutForConnectedAccount(
		payload: StripecreatePayoutForConnectedAccountInput!
	): Boolean!
	"""
	entry point for Weebhooks.
	"""
	webhook: String
}

input StripecreatePayoutForConnectedAccountInput{
	accountId: String!
	amount: Int!
	currency: String!
}

enum StripePaymentIntentStatus{
	requires_payment_method
	requires_confirmation
	requires_action
	processing
	requires_capture
	canceled
	succeeded
}

type StripeInvoice{
	id: String!
	account_country: String!
	account_name: String!
	account_tax_id: String
	amount_due: Int!
	amount_paid: Int!
	amount_remaining: Int!
	amount_shipping: Int!
	application_fee_amount: Int!
	attempt_count: Int!
	attempted: Boolean!
	auto_advance: Boolean!
	billing_reason: String!
	"""
	ID of the latest charge generated for this invoice
	"""
	charge: String
	collection_method: StripeInvoiceCollectionMethod!
	created: StripeTimestamp!
	"""
	ISO 4217 Currency codes
	"""
	currency: String!
	customer: String!
	customer_address: StripeAddress
	customer_email: String!
	customer_name: String!
	description: String
	hosted_invoice_url: String!
	period_end: StripeTimestamp!
	period_start: StripeTimestamp!
	status: StripeInvoiceStatus!
	subscription: String
	total: Int!
}

enum StripeInvoiceStatus{
	draft
	open
	paid
	uncollectible
	void
}

enum StripeInvoiceCollectionMethod{
	charge_automatically
	"""
	Email payment instructions to the customer.
	"""
	send_invoice
}

type StripePaymentIntent{
	id: String!
	client_secret: String!
	"""
	A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency).
	"""
	amount: Int!
	amount_capturable: Int!
	amount_received: Int!
	application_fee_amount: Int!
	capture_method: String!
	confirmation_method: String!
	created: StripeTimestamp!
	"""
	Three-letter ISO currency code, in lowercase. Must be a supported currency.
	"""
	currency: String!
	"""
	ID of the Customer this PaymentIntent belongs to
	"""
	customer: String!
	"""
	An arbitrary string attached to the object. Often useful for displaying to users.
	"""
	description: String!
	"""
	ID of the invoice that created this PaymentIntent, if it exists.
	"""
	invoice: String
	latest_charge: String!
	livemode: Boolean!
	payment_method: String!
	setup_future_usage: String!
	status: StripePaymentIntentStatus!
	"""
	A string that identifies the resulting payment as part of a group (for connected accounts). 
	"""
	transfer_group: String!
	"""
	The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.
	"""
	last_payment_error: StripePaymentIntentLastPaymentError
	"""
	The account (if any) for which the funds of the PaymentIntent are intended. 
	"""
	on_behalf_of: String
}

type StripePaymentIntentLastPaymentError{
	type: String!
	"""
	For card errors, the ID of the failed charge.
	"""
	charge: String
	"""
	For some errors that could be handled programmatically, a short string indicating the error code reported (https://stripe.com/docs/error-codes).
	"""
	code: String
	decline_code: String
	doc_url: String
	message: String!
	param: String
	payment_method_type: String
}

enum StripePaymentIntentSetupFutureUsage{
	"""
	Use on_session if you intend to only reuse the payment method when your customer is present in your checkout flow.
	"""
	on_session
	"""
	Use off_session if your customer may or may not be present in your checkout flow.
	"""
	off_session
}

input StripeInvoiceFilter{
	customerId: String!
	status: StripeInvoiceStatus
}

input StripePaymentIntentFilter{
	customerId: String!
	status: StripePaymentIntentStatus
}

input StripesetDefaultPaymentMethodInput{
	attachedPaymentMethodId: String!
	customerId: String!
}

input StripeAttachPaymentMethodInput{
	paymentMethodId: String!
	customerId: String!
}

input StripeCreateConnectAccountInput{
	type: StripeConnectAccountType!
	country: String!
	email: String!
	business_type: StripeConnectAccountBusinessType!
	bankAccount: StripeBankAccountInput!
}

enum StripeConnectAccountBusinessType{
	company
	government_entity
	individual
	non_profit
}

enum StripeConnectAccountType{
	standard
	express
	custom
}

input StripeBankAccountInput{
	country: String!
	"""
	Required supported currency for the country https://stripe.com/docs/payouts
	"""
	currency: String!
	"""
	IBAN account number
	"""
	account_number: String!
	"""
	Required when attaching the bank account to a Customer
	"""
	account_holder_name: String!
	account_holder_type: StripeBankAccountHolderType!
}

enum StripeBankAccountHolderType{
	individual
	company
}

input StripeSubscriptionFilter{
	customerId: String!
}

type StripeSubscription{
	id: String!
	cancel_at_period_end: Boolean!
	current_period_end: StripeTimestamp!
	current_period_start: StripeTimestamp!
	customer: String!
	description: String
	items: StripeSubscriptionItems!
	quantity: Int!
	status: StripeSubStatus!
}

enum StripeSubStatus{
	incomplete
	incomplete_expired
	trialing
	active
	past_due
	canceled
	unpaid
}

type StripeSubscriptionItems{
	data: [StripeItem!]!
	has_more: Boolean!
	total_count: Int!
	url: String!
	object: String!
}

type StripeItem{
	id: String!
	created: StripeTimestamp!
	metadata: StripeAnyObject
	price: StripePrice!
	quantity: Int!
	subscription: String!
}

type StripeUser{
	stripeId: String
	email: String!
}

input StripeInitStripeCustomerInput{
	email: String!
	name: String
	phone: String
	address: StripeAddressInput
}

input StripeCreateNewUserCheckoutSessionInput{
	"""
	Return url after successful transaction
	"""
	successUrl: String!
	cancelUrl: String!
	products: [StripeProductInput!]!
	"""
	Define amount to transfer into stripe connect account and set the rest for application fees
	"""
	applicationFee: StripeApplicationFeeInput
}

input StripeCreateCheckoutSessionInput{
	username: String!
	"""
	Return url after successful transaction
	"""
	successUrl: String!
	cancelUrl: String!
	products: [StripeProductInput!]!
	"""
	Define amount to transfer into stripe connect account and set the rest for application fees
	"""
	applicationFee: StripeApplicationFeeInput
}

input StripeApplicationFeeInput{
	"""
	Value from 0-100
	"""
	feePercentage: Int!
	"""
	Connect Account (not stripe customer) id
	"""
	connectAccountId: String!
}

input StripeProductInput{
	productId: String!
	quantity: Int!
}

input StripeCreateCustomerPortalInput{
	username: String!
	returnUrl: String!
}

input StripeAddressInput{
	"""
	City, district, suburb, town, village, or ward.
	"""
	city: String!
	"""
	Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
	"""
	country: String!
	"""
	Address line 1 (e.g., street, block, PO Box, or company name).
	"""
	line1: String!
	"""
	Address line 2 (e.g., apartment, suite, unit, or building).
	"""
	line2: String!
	"""
	ZIP or postal code.
	"""
	postal_code: String!
	"""
	State, county, province, prefecture, or region.
	"""
	state: String!
}

type StripeCustomer{
	id: String!
	email: String!
	name: String
	address: StripeAddress
	phone: String
	created: StripeTimestamp!
	invoicePrefix: String
	paymentMethods: [StripePaymentMethod!]
}

"""
https://stripe.com/docs/api/payment_methods/object
"""
type StripePaymentMethod{
	id: String!
	billing_details: StripePaymentBillingDetails!
	customer: String!
	metadata: StripeAnyObject
	type: StripePaymentMethodType!
	created: StripeTimestamp!
	livemode: Boolean!
}

enum StripePaymentMethodType{
	acss_debit
	affirm
	afterpay_clearpay
	alipay
	au_becs_debit
	bacs_debit
	bancontact
	blik
	boleto
	card
	card_present
	cashapp
	customer_balance
	eps
	fpx
	giropay
	grabpay
	ideal
	interac_present
	klarna
	konbini
	link
	oxxo
	p24
	paynow
	paypal
	pix
	promptpay
	sepa_debit
	sofort
	us_bank_account
	wechat_pay
	zip
}

type StripePaymentBillingDetails{
	address: StripeAddress
	email: String!
	name: String!
	phone: String
}

type StripeAddress{
	city: String
	country: String
	line1: String
	line2: String
	postal_code: String
	state: String
}

input StripeProductFilter{
	active: Boolean
	created: StripeTimestampFilter
	limit: Int
	shippable: Boolean
	ids: [ID!]
	starting_after: ID
	ending_before: ID
	url: String
}

input StripeRecurringFilter{
	interval: StripeInterval
	usageType: StripeUsageType
}

input StripePriceFilter{
	active: Boolean
	currency: String
	product: ID
	type: StripeType
	created: StripeTimestampFilter
	limit: Int
	starting_after: ID
	ending_before: ID
	recurring: StripeRecurringFilter
}

type StripeDimensions{
	height: Float
	length: Float
	weight: Float
	width: Float
}

type StripeProduct{
	id: ID!
	active: Boolean!
	created: StripeTimestamp
	default_price: StripePrice
	description: String
	images: [String!]
	livemode: Boolean
	metadata: StripeAnyObject
	name: String
	package_dimensions: StripeDimensions
	shippable: Boolean
	statement_descriptor: String
	tax_code: String
	unitLabel: String
	updated: StripeTimestamp
	url: String
	prices: [StripePrice!]
}

enum StripeBillingScheme{
	PER_UNIT
	TIERED
}

"""
Offset measured in seconds since Unix epoch.
"""
scalar StripeTimestamp

input StripeTimestampFilter{
	Gt: StripeTimestamp
	Gte: StripeTimestamp
	Lt: StripeTimestamp
	Lte: StripeTimestamp
}

type StripeCustomUnitAmount{
	maximum: Int
	minimum: Int
	preset: Int
}

"""
Any value that can be represented as JSON object
"""
scalar StripeAnyObject

enum StripeAggregateUsage{
	SUM
	LAST_DURING_PERIOD
	LAST_EVER
	MAX
}

enum StripeInterval{
	MONTH
	YEAR
	WEEK
	DAY
}

enum StripeUsageType{
	METERED
	LICENSED
}

type StripePriceRecurring{
	aggregate_usage: StripeAggregateUsage
	interval: StripeInterval
	interval_count: Int
	usage_type: StripeUsageType
	trial_period_days: Int
}

enum StripeTaxBehaviour{
	INCLUSIVE
	EXCLUSIVE
	UNSPECIFIED
}

enum StripeTiersMode{
	GRADUATED
	VOLUME
}

enum StripeRound{
	UP
	DOWN
}

type StripeTransformQuantity{
	divideBy: Int
	round: StripeRound
}

enum StripeType{
	RECURRING
	ONE_TIME
}

type StripePrice{
	id: ID!
	active: Boolean
	billing_scheme: StripeBillingScheme
	created: StripeTimestamp
	currency: String
	custom_unit_amount: StripeCustomUnitAmount
	livemode: Boolean
	lookup_key: String
	metadata: StripeAnyObject
	nickname: String
	product: StripeProduct
	recurring: StripePriceRecurring
	tax_behavior: StripeTaxBehaviour
	tiers_mode: StripeTiersMode
	transform_quantity: StripeTransformQuantity
	type: StripeType
	unit_amount: Int
	unit_amount_decimal: String
}

type StripeProductsPage{
	products: [StripeProduct!]
	startingAfter: ID
	endingBefore: ID
}


schema{
	query: Query,
	mutation: Mutation
}

type Mutation {
	webhook: String
	StripeMutation: StripeMutation!
}

type Query {
	StripeQuery: StripeQuery!
}