type Object {
  name: String!
  content: String
  oneToOne(info: DataInput): Object
  oneToMany(info: DataInput): [Object]
  _id: String!
  createdAt: String
  updatedAt: String
}

type Query {
  objects(
    info: DataInput
    fieldFilter: FieldFilterInput
    fieldRegexFilter: FieldFilterInput
    dateFilter: DateFilterInput
    sortByField: SortInput
  ): [Object!]
  oneById(info: DataInput, _id: String!): Object
}

type Mutation {
  create(info: DataInput, object: Update!): String
  update(info: DataInput, _id: String, object: Update!): Boolean
  delete(info: DataInput, _id: String): Boolean
}

input DataInput {
  model: String
  sourceParameters: [String]
  related: [ReladedInput]
  addFields: [AddFieldsInput]
}

input AddFieldsInput {
  name: String!
  value: Anything
}

input ReladedInput {
  model: String!
  field: String
}

input Create {
  name: String!
  content: String
  owner: String
}

input FieldFilterInput {
  name: String
  content: String
  owner: String
  customFieldName: String
}

input SortInput {
  field: SortField!
  """
  True for ASC, false for DESC
  """
  order: Boolean
}

input DateFilterInput {
  """
  Basicly filter use createdAt,
  but you can to set other field
  """
  dateFieldName: String
  from: String
  to: String
}

enum SortField {
  CREATED_AT
  UPDATED_AT
  NAME
  CUSTOM_FIELD_NAME
}

input Update {
  name: String
  content: String
  owner: String
}

scalar Anything

schema {
  query: Query
  mutation: Mutation
}
