type Query{
	userQuery(
		userId: String!
	): UserQuery
	publicQuery: PublicQuery!
}

type UserQuery{
	listNotifications(
		input: ListNotificationsInput
	): ListNotificationsResult!
	listChannels(
		input: ListChannelsInput
	): ListChannelsResult!
	generatePushNotificationToken: GeneratePushNotificationTokenResult!
}

type Mutation{
	userMutation(
		userId: String!
	): UserMutation
}

type UserMutation{
	sendStaticNotification(
		input: SendStaticNotificationInput!
	): SendStaticNotificationResult!
	sendPushNotificationToUsers(
		input: SendPushNotificationInput!
	): SendStaticNotificationResult!
	sendPushNotificationToInterests(
		input: SendPushNotificationInput!
	): SendStaticNotificationResult!
	getChannelAuthorization(
		input: GetChannelAuthorizationInput!
	): GetChannelAuthorizationResult!
	getBeamAuthorization(
		userId: String
	): GetChannelAuthorizationResult!
}

type PublicQuery{
	listNotificationGroups(
		input: ListNotificationGroupsInput
	): ListNotificationGroupsResult!
}

type NotificationGroupOps{
	"""
	if we adding or removing users, duplicates will be reduced
	"""
	addUserToGroup(
		userIds: [String!]
	): AddUserToGroupResult!
	removeUserFromGroup(
		userIds: [String!]
	): RemoveUserToGroupResult!
	editNotificationGroup(
		input: EditNotificationGroupInput!
	): EditNotificationGroupResult
	deleteNotificationGroup: DeleteNotificationGroupResult!
}

type GeneratePushNotificationTokenResult{
	error: GlobalError
	token: String!
	exp: Date
}

input GetChannelAuthorizationInput{
	targetId: String!
	socketId: String!
}

type GetChannelAuthorizationResult{
	error: GlobalError
	auth: String
	channel_data: String
	shared_secret: String
}

input ListChannelsInput{
	page: PageOptionsInput
}

input ListNotificationGroupsInput{
	page: PageOptionsInput
	filter: ListNotificationGroupsInputFilter
}

input ListNotificationGroupsInputFilter{
	"""
	this is a regex searching
	"""
	name: String
	"""
	if targetId is filled, this filter will return Notification groups that contains inside specific target
	"""
	targetId: String
	sortDirection: SortDirection
	notificationType: NotificationType
	startDate: Date
	endDate: Date
}

input ListNotificationsInput{
	filter: ListNotificationsInputFilter
	page: PageOptionsInput
}

input ListNotificationsInputFilter{
	notificationType: NotificationType
	sortDirection: SortDirection
	isReaded: Boolean
	startDate: Date
	endDate: Date
}

input SendStaticNotificationInput{
	channelsId: [String!]!
	message: String!
	event: String!
}

input SendPushNotificationInput{
	targets: [String!]!
	notification: NotificationPayloadInput!
}

input NotificationPayloadInput{
	title: String!
	body: String!
}

type ListChannelsResult{
	error: GlobalError
	result: [Channel!]
	page: PageOptionsResult
}

type DeleteNotificationGroupResult{
	error: GlobalError
	result: Boolean
}

type SendStaticNotificationResult{
	error: GlobalError
	result: Boolean
}

type EditNotificationGroupResult{
	error: GlobalError
	result: Boolean
}

input EditNotificationGroupInput{
	name: String
	users: [String!]
}

type AddUserToGroupResult implements error{
	result: Boolean
	error: GlobalError
}

type RemoveUserToGroupResult implements error{
	result: Boolean
	error: GlobalError
}

type CreateNotificationGroupResult implements error{
	error: GlobalError
	result: Boolean
}

input CreateNotificationGroupInput{
	name: String!
	users: [String!]!
	notificationType: NotificationType!
}

type MarkNotificationReadedResult{
	error: GlobalError
	result: Boolean
}

input MarkNotificationReadedInput{
	state: Boolean!
	notificationId: String!
}

type ListNotificationGroupsResult implements error{
	error: GlobalError
	notificationGroup: [NotificationGroup!]
}

type ListNotificationsResult implements error{
	error: GlobalError
	notification: [Notification!]
	page: PageOptionsResult
}

type GlobalError{
	message: String!
	path: String!
}

type Notification implements DbEssentials{
	body: String!
	targetIds: [String!]!
	_id: String!
	createdAt: Date!
	isReaded: Boolean!
	notificationType: NotificationType!
}

type NotificationGroup implements DbEssentials{
	targets: [String!]!
	notificationType: NotificationType!
	name: String!
	_id: String!
	createdAt: Date!
}

type NotificationReaded{
	userId: String!
	notificationId: String!
	createdAt: Date!
}

type Channel{
	channelId: String!
	createdAt: Date
}

input PageOptionsInput{
	"""
	default limit is 10
	"""
	limit: Int
	"""
	count stating from 0
	"""
	page: Int
}

type PageOptionsResult{
	count: Int
	hasNext: Boolean
}

interface DbEssentials{
	_id: String!
	createdAt: Date!
}

interface error{
	error: GlobalError
}

enum NotificationTargetType{
	USER
	GROUP
}

enum SortDirection{
	asc
	desc
}

enum NotificationType{
	STATIC
	PUSH
}

scalar Date

schema{
	query: Query
	mutation: Mutation
}
